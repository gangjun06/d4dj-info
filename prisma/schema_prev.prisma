
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}


enum Region {
  en
  jp
}

// ------- Models generated by scripts/generate -------
model HelpMaster {
  id String @id
  masterId Int 
  categoryId String 
  title String 
  imageUrl String 
  content String 
  region Region 
  category HelpCategoryMaster @relation("HelpMaster_Category" , fields: categoryId , references: id)
}

model UserExpMaster {
  id String @id
  level Int 
  totalExp Int 
  recoveryVoltage Int 
  maxFriendCount Int 
  deckSupportCardNum Int 
  adjustEventToken String 
  firebaseEventName String 
  region Region 
}

model UnitExpMaster {
  id String @id
  level Int 
  totalExp Int 
  region Region 
}

model ParameterLevelMaster {
  id String @id
  level Int 
  needsCharacterRank Int 
  effectValue Float 
  totalExp Int 
  region Region 
}

model AchievementMaster {
  id String @id
  masterId Int 
  groupId Int 
  sequence Int 
  title String 
  description String 
  conditionId Int 
  conditionValues Int[] 
  commandMasterId String 
  eventType EventType 
  isHidden Boolean 
  notifyType AchievementNotifyType 
  commandArgument String 
  region Region 
  commandMaster CommandMaster @relation("AchievementMaster_CommandMaster" , fields: commandMasterId , references: id)
}

model ADVLiveMaster {
  id String @id
  masterId Int 
  musicId Int 
  chartSection ChartSectionType 
  deckId Int 
  clubDeckId Int 
  clubFormationId Int 
  optionId Int 
  isAuto Boolean 
  isMVOn Boolean 
  region Region 
}

model AssistOptionPresetMaster {
  id String @id
  masterId Int 
  name String 
  statusCode Int 
  region Region 
}

model BingoCardMaster {
  id String @id
  masterId Int 
  minCardNumber Int 
  lotNumberNeedPoint Int 
  rewardPhaseId Int 
  cardImageIDs Int[] 
  cardType BingoCardType 
  region Region 
}

model CardDisplayMaster {
  id String @id
  masterId Int 
  groupId Int 
  cardId String 
  cardType CardIllustType 
  rate Int 
  region Region 
  card CardMaster @relation("CardDisplayMaster_Card" , fields: cardId , references: id)
}

model CardMaster {
  id String @id
  masterId Int 
  rarityId String 
  cardName String 
  attributeId String 
  characterId String 
  skillParameterId String 
  skillName String 
  passiveSkillId String 
  maxParameters Int[] 
  gachaMessage String 
  clothCardId Int 
  debutOrder Int 
  cardIllustHeadDistanceY Float[] 
  cardIllustCenterDistanceX Float[] 
  startDate DateTime 
  endDate DateTime 
  gachaCardAttribute Int 
  canUseCommonCardStackStock Boolean 
  region Region 
  cardDisplays CardDisplayMaster[] @relation("CardDisplayMaster_Card")
  rarity RarityMaster @relation("CardMaster_Rarity" , fields: rarityId , references: id)
  attribute AttributeMaster @relation("CardMaster_Attribute" , fields: attributeId , references: id)
  character CharacterMaster @relation("CardMaster_Character" , fields: characterId , references: id)
  skillParameter SkillMaster @relation("CardMaster_SkillParameter" , fields: skillParameterId , references: id)
  passiveSkill PassiveSkillMaster @relation("CardMaster_PassiveSkill" , fields: passiveSkillId , references: id)
  gachaPickUpCards GachaMaster[] @relation("GachaMaster_PickUpCards")
  gachaSelectBonusCards GachaMaster[] @relation("GachaMaster_SelectBonusCards")
  gachaHomeAnimationCards GachaMaster[] @relation("GachaMaster_HomeAnimationCards")
  boxGachas BoxGachaMaster[] @relation("BoxGachaMaster_Card")
  questDecks QuestDeckMaster[] @relation("QuestDeckMaster_Card")
}

model ChampionshipLeagueMaster {
  id String @id
  masterId Int 
  championshipId String 
  name String 
  colorCode String 
  region Region 
  championship ChampionshipMaster @relation("ChampionshipLeagueMaster_Championship" , fields: championshipId , references: id)
  setlists ChampionshipSetlistMaster[] @relation("ChampionshipSetlistMaster_League")
}

model ChampionshipMaster {
  id String @id
  masterId Int 
  name String 
  summary String 
  leagueSummary String 
  schedule String 
  entryDescription String 
  url String 
  entryURL String 
  startDate DateTime 
  endDate DateTime 
  maxPassNumber Int 
  canEntry Boolean 
  maxRankingNumber Int 
  displayStartDate DateTime 
  region Region 
  leagues ChampionshipLeagueMaster[] @relation("ChampionshipLeagueMaster_Championship")
}

model CharacterMaster {
  id String @id
  masterId Int 
  fullName String 
  firstName String 
  firstNameEnglish String 
  unitId String 
  profileAnswers String[] 
  fullNameEnglish String 
  colorCode String 
  idHistories Int[] 
  region Region 
  cards CardMaster[] @relation("CardMaster_Character")
  unit UnitMaster @relation("CharacterMaster_Unit" , fields: unitId , references: id)
  live2DUIChats Live2DUIChatMaster[] @relation("Live2DUIChatMaster_Character")
  liveResultEpisodes LiveResultEpisodeMaster[] @relation("LiveResultEpisodeMaster_Characters")
  mapEvents MapEventMaster[] @relation("MapEventMaster_Characters")
}

model CharacterMissionMaster {
  id String @id
  masterId Int 
  characterId Int 
  title String 
  description String 
  conditionId Int 
  conditionValues Int[] 
  rewardPoint Int 
  commandMasterId Int 
  commandArgument String 
  isHidden Boolean 
  notifyType AchievementNotifyType 
  region Region 
}

model CharacterRankRewardMaster {
  id String @id
  masterId Int 
  characterId Int 
  characterRank Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model ChargeLimitMaster {
  id String @id
  age Int 
  chageLimitYen Int 
  region Region 
}

model ChartMaster {
  id String @id
  masterId Int 
  musicId String 
  difficulty ChartDifficulty 
  level Float 
  achieveId Int 
  trends Float[] 
  overrideLevel String 
  designerId String 
  region Region 
  music MusicMaster @relation("ChartMaster_Music" , fields: musicId , references: id)
  designer ChartDesignerMaster @relation("ChartMaster_Designer" , fields: designerId , references: id)
}

model ClubItemDetailMaster {
  id String @id
  masterId Int 
  level Int 
  targetType ClubItemTargetType 
  targetId Int 
  effectValue Float 
  requiredStockId1 Int 
  requiredAmount1 Int 
  requiredStockId2 Int 
  requiredAmount2 Int 
  requiredStockId3 Int 
  requiredAmount3 Int 
  requiredStockId4 Int 
  requiredAmount4 Int 
  requiredStockId5 Int 
  requiredAmount5 Int 
  region Region 
}

model ClubItemMaster {
  id String @id
  masterId Int 
  groupId Int 
  name String 
  description String 
  spotId String 
  detailId Int 
  categoryId String 
  conditionCardId Int 
  startDate DateTime 
  endDate DateTime 
  duplicateId Int 
  searchWords String 
  region Region 
  spot ClubItemSpotMaster @relation("ClubItemMaster_Spot" , fields: spotId , references: id)
  category ClubItemCategoryMaster @relation("ClubItemMaster_Category" , fields: categoryId , references: id)
  questClubDecks QuestClubDeckMaster[] @relation("QuestClubDeckMaster_Item")
}

model ConditionMaster {
  id String @id
  masterId Int 
  category ConditionCategory 
  value Int[] 
  region Region 
}

model EpisodeMaster {
  id String @id
  category EpisodeCategory 
  masterId Int 
  title String 
  summary String 
  startDate DateTime 
  endDate DateTime 
  hasVoice Boolean 
  advliveID Int 
  episodeCharacters Int[] 
  region Region 
}

model EventMaster {
  id String @id
  masterId Int 
  name String 
  type EventType 
  startDate DateTime 
  receptionCloseDate DateTime 
  rankFixStartDate DateTime 
  resultAnnouncementDate DateTime 
  endDate DateTime 
  stockId Int 
  entryBonusStockAmount Int 
  stockAmountPerUse Int 
  episodeCharacters Int[] 
  storyUnlockDate DateTime 
  showExchangeButton Boolean 
  exchangeShopId Int 
  topPrefabPath String 
  showMissionButton Boolean 
  bgmpath String 
  episodeType EventEpisodeType 
  boxGachaId Int 
  region Region 
  aggregations EventAggregationBaseMaster[] @relation("EventAggregationBaseMaster_Event")
  eventSpecificBonuses EventSpecificBonusMaster[] @relation("EventSpecificBonusMaster_Event")
  episodes EventEpisodeMaster[] @relation("EventEpisodeMaster_Event")
  slotBonusTimes SlotBonusTimeMaster[] @relation("SlotBonusTimeMaster_Event")
  slotSpecificBonus SlotSpecificBonusMaster[] @relation("SlotSpecificBonusMaster_Event")
}

model EventAggregationBaseMaster {
  id String @id
  masterId Int 
  eventId String 
  aggregationType EventAggregationType 
  pointTypeName String 
  pointTypeIconName String 
  eventPointRewardTemplateId Int 
  eventRankingRewardTemplateId Int 
  region Region 
  event EventMaster @relation("EventAggregationBaseMaster_Event" , fields: eventId , references: id)
  eventPointRewards EventPointRewardMaster[] @relation("EventPointRewardMaster_Aggregation")
  raidBoss RaidBossMaster[] @relation("RaidBossMaster_Aggregation")
  eventRankingRewards EventRankingRewardMaster[] @relation("EventRankingRewardMaster_Aggregation")
  eventMedleySetlists EventMedleySetlistMaster[] @relation("EventMedleySetlistMaster_Aggregation")
}

model EventPointRewardMaster {
  id String @id
  masterId Int 
  aggregationId String 
  requiredPoint Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
  aggregation EventAggregationBaseMaster @relation("EventPointRewardMaster_Aggregation" , fields: aggregationId , references: id)
}

model EventRaveClubTierMaster {
  id String @id
  masterId Int 
  clubId Int 
  type RAVEClubTierType 
  audienceCount Int 
  topUserBorder Int 
  matchingTypeId Int 
  region Region 
}

model EventRaveMemberTrendMaster {
  id String @id
  masterId Int 
  category RaveMemberTrendGroupCategory 
  trendValue Int 
  effectValue Int 
  rate Int 
  description String 
  region Region 
}

model EventRaveRecordingBonusCardMaster {
  id String @id
  masterId Int 
  bonusId Int 
  cardId Int 
  region Region 
}

model EventSpecificBonusMaster {
  id String @id
  eventId String 
  characterIds Int[] 
  attributeId Int 
  characterMatchPointBonusValue Int 
  attributeMatchPointBonusValue Int 
  allMatchPointBonusValue Int 
  characterMatchParameterBonusId String 
  allMatchParameterBonusId String 
  eventPointParameterBonusId Int 
  eventPointParameterBonusRate Int 
  eventPointParameterBonusValue Int 
  eventPointParameterBaseValue Int 
  region Region 
  event EventMaster @relation("EventSpecificBonusMaster_Event" , fields: eventId , references: id)
  characterMatchParameterBonus ParameterBonusMaster @relation("EventSpecificBonusMaster_CharacterMatchParameterBonus" , fields: characterMatchParameterBonusId , references: id)
  allMatchParameterBonus ParameterBonusMaster @relation("EventSpecificBonusMaster_AllMatchParameterBonus" , fields: allMatchParameterBonusId , references: id)
}

model ExchangeItemMaster {
  id String @id
  masterId Int 
  exchangeId String 
  rewardCategory RewardCategory 
  rewardId Int 
  rewardAmount Int 
  exchangeCount Int 
  resetType DateSelectCategory 
  resetValue Int 
  recommend Boolean 
  startDate DateTime 
  endDate DateTime 
  requiredStockId1 Int 
  requiredAmount1 Int 
  requiredStockId2 Int 
  requiredAmount2 Int 
  requiredStockId3 Int 
  requiredAmount3 Int 
  requiredStockId4 Int 
  requiredAmount4 Int 
  prerequisiteItems Int[] 
  region Region 
  exchange ExchangeMaster @relation("ExchangeItemMaster_Exchange" , fields: exchangeId , references: id)
}

model ExchangeMaster {
  id String @id
  masterId Int 
  name String 
  isTabVisible Boolean 
  isPollingPlace Boolean 
  categoryName String 
  order Int 
  isSecret Boolean 
  secretName String 
  deliveryEffectId Int 
  deliveryDate DateTime 
  showPollingGauge Boolean 
  gaugeColorCodes String[] 
  region Region 
  items ExchangeItemMaster[] @relation("ExchangeItemMaster_Exchange")
}

model GachaMaster {
  id String @id
  masterId Int 
  name String 
  tableIds Int[] 
  gachaTypeName String 
  summaryId String 
  hasSpecificBg Boolean 
  startDate DateTime 
  endDate DateTime 
  detailId String 
  noteId String 
  loginTriggerMinutes Int 
  showHomeAnimation Boolean 
  hasPickUpDuplicateBonus Boolean 
  gachaCardAttribute Int 
  ascendingSortId Int 
  category GachaCategory 
  selectBonusMaxValue Int 
  pickUpDuplicateBonusStockIds Int[] 
  pickUpDuplicateBonusStockAmounts Int[] 
  type GachaType 
  stepLoopCount Int 
  otherCardDate DateTime 
  pickUpLevelMax Boolean 
  shareCashBackRate Int 
  randomBonusMaxValue Int 
  randomBonusStockId Int 
  region Region 
  tableRates GachaTableRateMaster[] @relation("GachaMaster_TableRates")
  pickUpCards CardMaster[] @relation("GachaMaster_PickUpCards")
  summary GachaSummaryWordMaster @relation("GachaMaster_Summary" , fields: summaryId , references: id)
  detail GachaExplanationWordMaster @relation("GachaMaster_Detail" , fields: detailId , references: id)
  note GachaNotesWordMaster @relation("GachaMaster_Note" , fields: noteId , references: id)
  selectBonusCards CardMaster[] @relation("GachaMaster_SelectBonusCards")
  homeAnimationCards CardMaster[] @relation("GachaMaster_HomeAnimationCards")
  draws GachaDrawMaster[] @relation("GachaDrawMaster_Gacha")
}

model GachaRouletteMaster {
  id String @id
  masterId Int 
  type GachaRouletteType 
  targetId Int 
  effectValue Int 
  drawLimit Int 
  region Region 
}

model GrowthBattleEnemyMaster {
  id String @id
  masterId Int 
  conditionValue Int 
  enemyCharacterIds Int[] 
  sequence Int 
  debuffThreshold Int[] 
  debuffValue Int[] 
  buffThreshold Int[] 
  buffValue Int[] 
  enemyName String 
  aggregationId Int 
  imagePositionY Float 
  enemyType GrowthEnemyType 
  eventId Int 
  region Region 
}

model GrowthMapLayoutConfigMaster {
  id String @id
  eventId Int 
  blockYPositions Int[] 
  blockYPositionOrders Int[] 
  backgroundChangeBlockIndexes Int[] 
  backgroundPrefabNames String[] 
  bgmpath String 
  region Region 
}

model HonorMaster {
  id String @id
  masterId Int 
  type HonorType 
  name String 
  description String 
  effectType Int 
  conditionCardId Int 
  duplicateId Int 
  region Region 
}

model UnitEpisodeMaster {
  id String @id
  masterId Int 
  backgroundId Int 
  season Int 
  unitId String 
  chapterNumber Int 
  region Region 
  unit UnitMaster @relation("UnitEpisodeMaster_Unit" , fields: unitId , references: id)
}

model CharacterEpisodeMaster {
  id String @id
  masterId Int 
  backgroundId Int 
  characterId Int 
  chapterNumber Int 
  region Region 
}

model EventEpisodeMaster {
  id String @id
  masterId Int 
  backgroundId Int 
  eventId String 
  chapterNumber Int 
  region Region 
  event EventMaster @relation("EventEpisodeMaster_Event" , fields: eventId , references: id)
}

model Live2DUIChatMaster {
  id String @id
  masterId Int 
  categories Live2DUIChatCategory[] 
  characterId String 
  clothId Int 
  message String 
  motion String 
  startDate DateTime 
  endDate DateTime 
  region Region 
  character CharacterMaster @relation("Live2DUIChatMaster_Character" , fields: characterId , references: id)
}

model LiveCutinMaster {
  id String @id
  masterId Int 
  characterId1 Int 
  text1 String 
  motion1 String 
  characterId2 Int 
  text2 String 
  motion2 String 
  characterId3 Int 
  text3 String 
  motion3 String 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model LiveSEPackMaster {
  id String @id
  masterId Int 
  name String 
  summary String 
  category LiveSEPackCategory 
  startDate DateTime 
  endDate DateTime 
  region Region 
  liveSEs LiveSEMaster[] @relation("LiveSEMaster_LiveSEPackMaster")
}

model LoginBonusItemMaster {
  id String @id
  loginBonusId String 
  sequence Int 
  positions Int[] 
  region Region 
  loginBonus LoginBonusMaster @relation("LoginBonusItemMaster_LoginBonus" , fields: loginBonusId , references: id)
}

model MapBirthdayFlowerMaster {
  id String @id
  masterId Int 
  characterId Int 
  flowerType MapBirthdayFlowerType 
  requiredCardId Int 
  anniversaryId Int 
  overwriteName String 
  overwriteDescription String 
  bonusCategory RewardCategory 
  bonusRewardId Int 
  bonusRewardAmount Int 
  region Region 
}

model MapBirthdayHallMaster {
  id String @id
  characterId Int 
  startDate DateTime 
  endDate DateTime 
  towerId Int 
  region Region 
}

model MapMaster {
  id String @id
  masterId Int 
  name String 
  positionX Int 
  positionY Int 
  bgm String 
  characterScale Float 
  startDate DateTime 
  endDate DateTime 
  advbackgroundId Int 
  forceDefaultMap Boolean 
  hideMapId Int 
  region Region 
  mapMobs MapMobMaster[] @relation("MapMobMaster_Map")
  mapObjectSpots MapObjectSpotMaster[] @relation("MapObjectSpotMaster_Map")
  questBlocks QuestBlockMaster[] @relation("QuestBlockMaster_Map")
  mapEvents MapEventMaster[] @relation("MapEventMaster_Map")
}

model MapMobMaster {
  id String @id
  masterId Int 
  mapId String 
  positionX Int 
  positionY Int 
  motion Int 
  direction Int 
  skin Int 
  movingPattern MobMovingPattern 
  movingDuration Float 
  delaySeconds Float 
  wayPoint1X Int 
  wayPoint1Y Int 
  wayPoint2X Int 
  wayPoint2Y Int 
  wayPoint3X Int 
  wayPoint3Y Int 
  wayPoint4X Int 
  wayPoint4Y Int 
  wayPoint5X Int 
  wayPoint5Y Int 
  characterId Int 
  startDate DateTime 
  endDate DateTime 
  summerSkin Int 
  region Region 
  map MapMaster @relation("MapMobMaster_Map" , fields: mapId , references: id)
}

model MapObjectMaster {
  id String @id
  masterId Int 
  spotId String 
  fileName String 
  randomWeight Int 
  startDate DateTime 
  endDate DateTime 
  buttonText1 String 
  buttonHref1 String 
  buttonText2 String 
  buttonHref2 String 
  buttonText3 String 
  buttonHref3 String 
  region Region 
  spot MapObjectSpotMaster @relation("MapObjectMaster_Spot" , fields: spotId , references: id)
}

model MapObjectSpotMaster {
  id String @id
  masterId Int 
  mapId String 
  positionX Int 
  positionY Int 
  objectType MapObjectType 
  region Region 
  mapObjects MapObjectMaster[] @relation("MapObjectMaster_Spot")
  map MapMaster @relation("MapObjectSpotMaster_Map" , fields: mapId , references: id)
}

model MapSpotMaster {
  id String @id
  mapId Int 
  spotId Int 
  position1X Int 
  position1Y Int 
  position2X Int 
  position2Y Int 
  position3X Int 
  position3Y Int 
  position4X Int 
  position4Y Int 
  position5X Int 
  position5Y Int 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model MileageMaster {
  id String @id
  rank MileageRank 
  needMilePoint Int 
  region Region 
}

model MissionDetailMaster {
  id String @id
  masterId Int 
  panelId String 
  sequence Int 
  title String 
  description String 
  conditionId Int 
  conditionValues Int[] 
  commandMasterId String 
  homePriority Int 
  notifyType AchievementNotifyType 
  commandArgument String 
  region Region 
  panel MissionPanelMaster @relation("MissionDetailMaster_Panel" , fields: panelId , references: id)
  commandMaster CommandMaster @relation("MissionDetailMaster_CommandMaster" , fields: commandMasterId , references: id)
}

model MissionGroupMaster {
  id String @id
  masterId Int 
  category MissionCategory 
  name String 
  startDate DateTime 
  endDate DateTime 
  resetType DateSelectCategory 
  resetValue Int 
  subscriptionId Int 
  region Region 
  panels MissionPanelMaster[] @relation("MissionPanelMaster_Group")
}

model MobBodyVariantMaster {
  id String @id
  masterId Int 
  skin Int 
  spineId Int 
  region Region 
}

model MultiRoomMaster {
  id String @id
  masterId Int 
  roomType MultiRoomType 
  type LiveType 
  name String 
  description String 
  minimumDeckPower Int 
  multiplier Float 
  forceAssistOff Boolean 
  isRaidRoom Boolean 
  region Region 
}

model MusicMaster {
  id String @id
  masterId Int 
  name String 
  readName String 
  lyrist String 
  composer String 
  arranger String 
  specialUnitName String 
  category MusicCategory 
  unitId String 
  defaultOrder Int 
  musicBpm Float 
  openKey Int 
  sectionTrend ChartSectionType 
  startDate DateTime 
  endDate DateTime 
  hasMovie Boolean 
  isHidden Boolean 
  excludeChallenge Boolean 
  canFairUse Boolean 
  unlockDate DateTime 
  region Region 
  charts ChartMaster[] @relation("ChartMaster_Music")
  unit UnitMaster @relation("MusicMaster_Unit" , fields: unitId , references: id)
  musicMixes MusicMixMaster[] @relation("MusicMixMaster_Music")
  djSimulatorSetlistMusics DJSimulatorSetlistMusicMaster[] @relation("DJSimulatorSetlistMusicMaster_Music")
  towerStages TowerStageMaster[] @relation("TowerStageMaster_Musics")
}

model QuestBlockMaster {
  id String @id
  masterId Int 
  mapId String 
  order Int 
  chartId Int 
  chartSection ChartSectionType 
  deckId Int 
  clubDeckId Int 
  conditionType QuestConditionType 
  conditionValue Int 
  clubFormationId Int 
  deckPower Int 
  name String 
  region Region 
  map MapMaster @relation("QuestBlockMaster_Map" , fields: mapId , references: id)
}

model QuestMapMaster {
  id String @id
  masterId Int 
  name String 
  startDate DateTime 
  endDate DateTime 
  maxPlayableCount Int 
  bgm String 
  backgroundPrefabFileName String 
  recoveryStockId Int 
  recoveryStockAmount Int 
  resetType DateSelectCategory 
  resetValue Int 
  region Region 
}

model RaidBossLocalPointGroupMaster {
  id String @id
  groupId Int 
  name String 
  bossIds Int[] 
  region Region 
}

model RaidBossMaster {
  id String @id
  aggregationId String 
  roomId Int 
  eventId Int 
  name String 
  hp Float 
  startDate DateTime 
  endDate DateTime 
  specificBonusCharacterIds Int[] 
  useRandomUnitImage Boolean 
  bonusCardIds Int[] 
  dailyRewardMultipliers Int[] 
  overrideImageNumber Int 
  region Region 
  aggregation EventAggregationBaseMaster @relation("RaidBossMaster_Aggregation" , fields: aggregationId , references: id)
}

model RaidSpecialBossMaster {
  id String @id
  groupId Int 
  bossIds Int[] 
  eventId Int 
  bossLoopType BossLoopType 
  region Region 
}

model RarityMaster {
  id String @id
  masterId Int 
  maxLevels Int[] 
  maxLevelParameterRates Float[] 
  limitBreakBonuses Int[] 
  sealAmount Int 
  cardStackBonuses Int[] 
  rarityName String 
  value Int 
  starCount Int 
  firstCardIllustType CardIllustType 
  region Region 
  cards CardMaster[] @relation("CardMaster_Rarity")
  limitBreakItems LimitBreakItemMaster[] @relation("LimitBreakItemMaster_Rarity")
}

model RatingMaster {
  id String @id
  masterId Int 
  name String 
  startDate DateTime 
  endDate DateTime 
  ratings Int[] 
  musicNumber Int 
  varyByMileage Boolean 
  region Region 
}

model SkillMaster {
  id String @id
  masterId Int 
  minRecoveryValue Int 
  maxRecoveryValue Int 
  comboSupportCount Int 
  scoreUpRate Int 
  minSeconds Float 
  maxSeconds Float 
  perfectScoreUpRate Int 
  groupBonusCharacterIds Int[] 
  groupBonusRates Int[] 
  region Region 
  cards CardMaster[] @relation("CardMaster_SkillParameter")
}

model SlotBonusTimeMaster {
  id String @id
  eventId String 
  extendCount Int 
  pointRate Int 
  ownedBonusCardPointRate Int 
  extraTrainingPointRate Int 
  extendTime Int 
  ownedBonusCardExtendTime Int 
  extraTrainingExtendTime Int 
  stockId String 
  stockAmount Int 
  region Region 
  event EventMaster @relation("SlotBonusTimeMaster_Event" , fields: eventId , references: id)
  stock StockMaster @relation("SlotBonusTimeMaster_Stock" , fields: stockId , references: id)
}

model StampMaster {
  id String @id
  masterId Int 
  category StampCategory 
  name String 
  description String 
  hasVoice Boolean 
  duplicateId Int 
  characterIds Int[] 
  region Region 
}

model StockMaster {
  id String @id
  masterId Int 
  name String 
  category StockCategory 
  viewCategoryId String 
  summary String 
  attributeId Int 
  rarity Int 
  exp Int 
  buffCharacterId Int 
  recoveryAmount Int 
  consumeAmount Int 
  maxAmount Int 
  startDate DateTime 
  endDate DateTime 
  isAppropriateSales Boolean 
  region Region 
  slotBonusTimes SlotBonusTimeMaster[] @relation("SlotBonusTimeMaster_Stock")
  viewCategory StockViewCategoryMaster @relation("StockMaster_ViewCategory" , fields: viewCategoryId , references: id)
  boxGachas BoxGachaMaster[] @relation("BoxGachaMaster_Stock")
  cardStackItems CardStackItemMaster[] @relation("CardStackItemMaster_Stock")
  slotRewards SlotRewardMaster[] @relation("SlotRewardMaster_Stock")
  auditionGachaReset AuditionGachaResetMaster[] @relation("AuditionGachaResetMaster_Stock")
  gachaDraws GachaDrawMaster[] @relation("GachaDrawMaster_Stock")
  chartAchieveRewards ChartAchieveMaster[] @relation("ChartAchieveMaster_RewardStock")
  limitBreakItems LimitBreakItemMaster[] @relation("LimitBreakItemMaster_Stock")
}

model UnitMaster {
  id String @id
  masterId Int 
  name String 
  canTraining Boolean 
  summaries String[] 
  mainColorCode String 
  subColorCode String 
  shortName String 
  initDeckCharacterIds Int[] 
  region Region 
  characters CharacterMaster[] @relation("CharacterMaster_Unit")
  episodes UnitEpisodeMaster[] @relation("UnitEpisodeMaster_Unit")
  musics MusicMaster[] @relation("MusicMaster_Unit")
}

model MusicMixMaster {
  id String @id
  musicId String 
  section ChartSectionType 
  startTime Float 
  startTimeBpm Float 
  endTime Float 
  endTimeBpm Float 
  enableLongMixStart Boolean 
  enableLongMixEnd Boolean 
  region Region 
  music MusicMaster @relation("MusicMixMaster_Music" , fields: musicId , references: id)
}

model ADVLiveClubDeckMaster {
  id String @id
  masterId Int 
  spotId Int 
  itemId Int 
  effectIndex Int 
  region Region 
}

model ADVLiveDeckMaster {
  id String @id
  masterId Int 
  name String 
  order Int 
  cardId Int 
  illustType CardIllustType 
  region Region 
}

model BeginnersMissionMaster {
  id String @id
  detailId Int 
  hint String 
  isRecommend Boolean 
  isTutorialEnd Boolean 
  region Region 
}

model BoxGachaMaster {
  id String @id
  masterId Int 
  name String 
  tableIds Int[] 
  jackpotTableId Int 
  startDate DateTime 
  endDate DateTime 
  stockId String 
  stockAmount Int 
  cardId String 
  region Region 
  stock StockMaster @relation("BoxGachaMaster_Stock" , fields: stockId , references: id)
  card CardMaster @relation("BoxGachaMaster_Card" , fields: cardId , references: id)
}

model BoxGachaTableMaster {
  id String @id
  masterId Int 
  tableId Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  maxCount Int 
  ascendingSortId Int 
  region Region 
}

model CampaignButtonMaster {
  id String @id
  masterId Int 
  command String 
  startDate DateTime 
  endDate DateTime 
  text String 
  imageFileName String 
  displayLocation CampaignButtonDisplayLocation 
  region Region 
}

model CampaignMaster {
  id String @id
  category CampaignCategory 
  rate Float 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model TitleDisplayMaster {
  id String @id
  cardDisplayGroupId Int 
  startDate DateTime 
  endDate DateTime 
  titleBGMCueId Int 
  titleVoiceCueName String 
  titleVoiceCueName2 String 
  region Region 
}

model AttributeMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
  cards CardMaster[] @relation("CardMaster_Attribute")
  limitBreakItems LimitBreakItemMaster[] @relation("LimitBreakItemMaster_Attribute")
}

model CardExpMaster {
  id String @id
  level Int 
  totalExp Int 
  region Region 
}

model CardStackItemMaster {
  id String @id
  masterId Int 
  stackCount Int 
  attributeId Int 
  characterId Int 
  rarityId Int 
  stockId String 
  amount Int 
  region Region 
  stock StockMaster @relation("CardStackItemMaster_Stock" , fields: stockId , references: id)
}

model PassiveSkillDescriptionMaster {
  id String @id
  type PassiveSkillType 
  description String 
  region Region 
}

model PassiveSkillMaster {
  id String @id
  masterId Int 
  type PassiveSkillType 
  minValue Float 
  maxValue Float 
  subValue Float 
  bonusCharacterId Int 
  region Region 
  cards CardMaster[] @relation("CardMaster_PassiveSkill")
}

model SkillExpMaster {
  id String @id
  level Int 
  rarityId Int 
  totalExp Int 
  region Region 
}

model ChampionshipSetlistMaster {
  id String @id
  masterId Int 
  leagueId String 
  name String 
  dayLimit Int 
  charts Int[] 
  region Region 
  league ChampionshipLeagueMaster @relation("ChampionshipSetlistMaster_League" , fields: leagueId , references: id)
}

model ClothMaster {
  id String @id
  masterId Int 
  clothName String 
  characterId Int 
  clothDescription String 
  debutOrder Int 
  startDate DateTime 
  endDate DateTime 
  sourceCardId Int 
  region Region 
}

model ClubItemCategoryMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
  items ClubItemMaster[] @relation("ClubItemMaster_Category")
}

model ClubItemSpotMaster {
  id String @id
  masterId Int 
  name String 
  catgory ClubItemSpotCategory 
  region Region 
  items ClubItemMaster[] @relation("ClubItemMaster_Spot")
  questClubDecks QuestClubDeckMaster[] @relation("QuestClubDeckMaster_Spot")
}

model ComicMaster {
  id String @id
  masterId Int 
  title String 
  episodeNumber String 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model CommonValueMaster {
  id String @id
  masterId CommonValueType 
  value Int 
  region Region 
}

model OverrideDefinedGameTextMaster {
  id String @id
  type String 
  text String 
  region Region 
}

model DJSimulatorHostCharacterMaster {
  id String @id
  masterId Int 
  clothIds Int[] 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model DJSimulatorHostClubSetlistMaster {
  id String @id
  masterId Int 
  unitId Int 
  groupIndex Int 
  clubItemId Int 
  region Region 
}

model DJSimulatorSetlistMaster {
  id String @id
  masterId Int 
  name String 
  startDate DateTime 
  endDate DateTime 
  region Region 
  musics DJSimulatorSetlistMusicMaster[] @relation("DJSimulatorSetlistMusicMaster_Setlist")
}

model DJSimulatorSetlistMusicMaster {
  id String @id
  setlistId String 
  order Int 
  musicId String 
  section ChartSectionType 
  region Region 
  setlist DJSimulatorSetlistMaster @relation("DJSimulatorSetlistMusicMaster_Setlist" , fields: setlistId , references: id)
  music MusicMaster @relation("DJSimulatorSetlistMusicMaster_Music" , fields: musicId , references: id)
}

model GrowthEpisodeMaster {
  id String @id
  masterId Int 
  mapBlockCatgory GrowthBlockCategory 
  characterId Int 
  region Region 
}

model LiveResultEpisodeMaster {
  id String @id
  masterId Int 
  region Region 
  characters CharacterMaster[] @relation("LiveResultEpisodeMaster_Characters")
}

model BingoRewardMaster {
  id String @id
  masterId Int 
  rewardPhaseId Int 
  category BingoRewardCategory 
  maxCount Int 
  rewardCategory RewardCategory 
  rewardId Int 
  rewardAmount Int 
  region Region 
}

model GrowthActionCardLevelValueMaster {
  id String @id
  masterId Int 
  rate Int 
  region Region 
}

model GrowthActionCardParameterCountMaster {
  id String @id
  rarityId Int 
  value Int 
  region Region 
}

model GrowthActionCardValueMaster {
  id String @id
  masterId Int 
  value Int 
  region Region 
}

model GrowthBattleEnemyRewardMaster {
  id String @id
  masterId Int 
  enemyId Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model GrowthBlockEffectDetailMaster {
  id String @id
  masterId Int 
  effectType GrowthBlockEffectType 
  effectTargetType GrowthEffectTargetType 
  effectTargetValue Int 
  effectTypeValue Int 
  effectTypeOperator GrowthEffectTypeOperator 
  effectChance Int 
  backUpId Int 
  region Region 
}

model GrowthBlockEffectSetMaster {
  id String @id
  masterId Int 
  effectDetailsId Int[] 
  blockChance Int 
  region Region 
}

model GrowthCharacterBlockMaster {
  id String @id
  masterId Int 
  sequence Int 
  characterIdId Int 
  characterEffectType GrowthBlockEffectType 
  effectValues Int[] 
  effectTypeOperator GrowthEffectTypeOperator 
  clothId Int 
  episodeId Int 
  region Region 
}

model GrowthSpecificBonusMaster {
  id String @id
  eventId Int 
  cardIdsId Int[] 
  bonusRate Int 
  sameCharacterBonusRate Int 
  region Region 
}

model GrowthUnlockMaster {
  id String @id
  eventId Int 
  lockMemberId Int 
  stockId Int 
  amount Int 
  region Region 
}

model EventAggregationTermMaster {
  id String @id
  aggregationId Int 
  startDate DateTime 
  receptionCloseDate DateTime 
  rankFixStartDate DateTime 
  resultAnnouncementDate DateTime 
  region Region 
}

model EventPointRewardTemplateMaster {
  id String @id
  masterId Int 
  templateId Int 
  requiredPoint Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model EventRankingRewardMaster {
  id String @id
  masterId Int 
  aggregationId String 
  lowestRanking Int 
  highestRanking Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
  aggregation EventAggregationBaseMaster @relation("EventRankingRewardMaster_Aggregation" , fields: aggregationId , references: id)
}

model EventRankingRewardTemplateMaster {
  id String @id
  masterId Int 
  templateId Int 
  lowestRanking Int 
  highestRanking Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model ParameterBonusMaster {
  id String @id
  masterId Int 
  targetId Int 
  value Int 
  region Region 
  eventSpecificBonusChara EventSpecificBonusMaster[] @relation("EventSpecificBonusMaster_CharacterMatchParameterBonus")
  eventSpecificBonusAll EventSpecificBonusMaster[] @relation("EventSpecificBonusMaster_AllMatchParameterBonus")
  eventMedleySetlists EventMedleySetlistMaster[] @relation("EventMedleySetlistMaster_CharacterMatchParameterBonus")
  raidBossLocalPointBonusDetails RaidBossLocalPointBonusDetailMaster[] @relation("RaidBossLocalPointBonusDetailMaster_Bonus")
  towerChara TowerMaster[] @relation("TowerMaster_CharacterMatchParameterBonus")
  towerAttr TowerMaster[] @relation("TowerMaster_AttributeMatchParameterBonus")
}

model EventMedleySetlistMaster {
  id String @id
  aggregationId String 
  name String 
  musicIds Int[] 
  requiredPoint Int 
  startDate DateTime 
  endDate DateTime 
  order Int 
  specificBonusCharacterIds Int[] 
  characterMatchParameterBonusId String 
  bonusCardIds Int[] 
  region Region 
  aggregation EventAggregationBaseMaster @relation("EventMedleySetlistMaster_Aggregation" , fields: aggregationId , references: id)
  characterMatchParameterBonus ParameterBonusMaster @relation("EventMedleySetlistMaster_CharacterMatchParameterBonus" , fields: characterMatchParameterBonusId , references: id)
}

model PokerCharacterHandMaster {
  id String @id
  masterId Int 
  name String 
  coinAmount Int 
  characterIds Int[] 
  region Region 
}

model PokerCoinMultiplierMaster {
  id String @id
  hand PokerHandCategory 
  multiplier Float 
  region Region 
}

model RaidBossHpBonusDetailMaster {
  id String @id
  masterId Int 
  bonusId Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model RaidBossHpBonusMaster {
  id String @id
  masterId Int 
  aggregationId Int 
  hp Float 
  name String 
  region Region 
}

model RaidBossLocalPointBonusDetailMaster {
  id String @id
  masterId Int 
  bonusId String 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
  bonus ParameterBonusMaster @relation("RaidBossLocalPointBonusDetailMaster_Bonus" , fields: bonusId , references: id)
}

model RaidBossLocalPointBonusMaster {
  id String @id
  masterId Int 
  localPoint Int 
  name String 
  region Region 
}

model EventRaveClubMaster {
  id String @id
  masterId Int 
  name String 
  rankingRewardGroupId Int 
  region Region 
}

model EventRaveClubRankingRewardMaster {
  id String @id
  masterId Int 
  aggregationId Int 
  groupId Int 
  lowestRanking Int 
  highestRanking Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model EventRaveMemberTrendGroupMaster {
  id String @id
  category RaveMemberTrendGroupCategory 
  name String 
  rate Int 
  region Region 
}

model EventRaveMusicTrendGroupMaster {
  id String @id
  masterId Int 
  name String 
  pickUpTrendCount Int 
  hintMusicCount Int 
  effectValue Int 
  penaltyLine Int 
  region Region 
}

model EventRaveNPCDeckMaster {
  id String @id
  masterId Int 
  deckId Int 
  sequence Int 
  cardId Int 
  level Int 
  limitBreakCount Int 
  stackCount Int 
  skillLevel Int 
  region Region 
}

model EventRaveNPCMaster {
  id String @id
  masterId Int 
  clubId Int 
  name String 
  audienceCount Int 
  deckId Int 
  musicTableId Int 
  scoreRate Int 
  region Region 
}

model EventRaveRecordingBonusMaster {
  id String @id
  masterId Int 
  description String 
  effectValue Int 
  region Region 
}

model EventRaveRewardMaster {
  id String @id
  masterId Int 
  aggregationId Int 
  clubId Int 
  requiredPoint Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model EventRaveSeasonMaster {
  id String @id
  seasonId Int 
  eventId Int 
  isFinalEvent Boolean 
  region Region 
}

model EventRaveShiftMaster {
  id String @id
  masterId Int 
  name String 
  startDate DateTime 
  endDate DateTime 
  clubId Int 
  rankingRewardGroupId Int 
  region Region 
}

model EventRaveShiftRankingRewardMaster {
  id String @id
  masterId Int 
  aggregationId Int 
  groupId Int 
  lowestRanking Int 
  highestRanking Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model EventRaveSplitRankingRewardMaster {
  id String @id
  masterId Int 
  aggregationId Int 
  seasonId Int 
  lowestRanking Int 
  highestRanking Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model SlotEffectMaster {
  id String @id
  masterId Int 
  effectId Int 
  phase SlotEffectPhase 
  normalRate Int 
  chanceTimeRate Int 
  toChanceRate Int 
  region Region 
}

model SlotRewardMaster {
  id String @id
  masterId Int 
  stockId String 
  amount Int 
  normalRate Int 
  chanceTimeRate Int 
  effectId Int 
  cardId Int 
  stampId Int 
  region Region 
  stock StockMaster @relation("SlotRewardMaster_Stock" , fields: stockId , references: id)
}

model SlotSpecificBonusMaster {
  id String @id
  eventId String 
  bonusCardIds Int[] 
  region Region 
  event EventMaster @relation("SlotSpecificBonusMaster_Event" , fields: eventId , references: id)
}

model AuditionGachaResetMaster {
  id String @id
  gachaDrawId String 
  stockId String 
  stockAmount Int 
  region Region 
  gachaDraw GachaDrawMaster @relation("AuditionGachaResetMaster_GachaDraw" , fields: gachaDrawId , references: id)
  stock StockMaster @relation("AuditionGachaResetMaster_Stock" , fields: stockId , references: id)
}

model GachaBonusMaster {
  id String @id
  gachaId Int 
  isMain Boolean 
  maxValue Int 
  tableRateId String 
  tableIds Int[] 
  text String 
  region Region 
  tableRate GachaTableRateMaster @relation("GachaBonusMaster_TableRate" , fields: tableRateId , references: id)
}

model GachaDrawMaster {
  id String @id
  masterId Int 
  gachaId String 
  drawAmounts Int[] 
  stockId String 
  stockAmount Int 
  drawLimit Int 
  isResetLimitEveryday Boolean 
  rouletteRates Int[] 
  bonusStockIds Int[] 
  bonusStockAmounts Int[] 
  shareCashBackStockId Int 
  shareCashBackPerStockCount Int 
  region Region 
  auditionGachaReset AuditionGachaResetMaster[] @relation("AuditionGachaResetMaster_GachaDraw")
  gacha GachaMaster @relation("GachaDrawMaster_Gacha" , fields: gachaId , references: id)
  stock StockMaster @relation("GachaDrawMaster_Stock" , fields: stockId , references: id)
}

model GachaExplanationWordMaster {
  id String @id
  masterId Int 
  text String 
  region Region 
  gacha GachaMaster[] @relation("GachaMaster_Detail")
}

model GachaNotesWordMaster {
  id String @id
  masterId Int 
  text String 
  region Region 
  gacha GachaMaster[] @relation("GachaMaster_Note")
}

model GachaSummaryWordMaster {
  id String @id
  masterId Int 
  text String 
  region Region 
  gacha GachaMaster[] @relation("GachaMaster_Summary")
}

model GachaTableMaster {
  id String @id
  masterId Int 
  tableId Int 
  cardId Int 
  rate Int 
  region Region 
}

model GachaTableRateMaster {
  id String @id
  masterId Int 
  rates Int[] 
  rarityIds Int[] 
  tabName String 
  description String 
  region Region 
  gacha GachaMaster[] @relation("GachaMaster_TableRates")
  gachaBonuses GachaBonusMaster[] @relation("GachaBonusMaster_TableRate")
}

model GradeMusicListMaster {
  id String @id
  masterId Int 
  seasonId Int 
  grade Int 
  name String 
  maxHP Int 
  evaluationRate Int[] 
  charts Int[] 
  isHidden Int[] 
  missionId Int 
  openConditionMissionDetailsId Int[] 
  region Region 
}

model GradeSeasonMaster {
  id String @id
  masterId Int 
  name String 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model HelpCategoryMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
  helps HelpMaster[] @relation("HelpMaster_Category")
}

model ChartAchieveMaster {
  id String @id
  masterId Int 
  type ChartAchieveType 
  value Int 
  rewardStockId String 
  rewardAmount Int 
  region Region 
  rewardStock StockMaster @relation("ChartAchieveMaster_RewardStock" , fields: rewardStockId , references: id)
}

model LiveSEMaster {
  id String @id
  masterId Int 
  liveSEPackMasterId String 
  category LiveSECategory 
  name String 
  isPreset Boolean 
  region Region 
  liveSEPackMaster LiveSEPackMaster @relation("LiveSEMaster_LiveSEPackMaster" , fields: liveSEPackMasterId , references: id)
}

model LiveSEPackPurchaseMaster {
  id String @id
  masterId Int 
  startDate DateTime 
  endDate DateTime 
  requiredStockId Int 
  requiredAmount Int 
  region Region 
}

model EventLoginBonusItemMaster {
  id String @id
  loginBonusId String 
  eventId Int 
  sequence Int 
  region Region 
  loginBonus LoginBonusMaster @relation("EventLoginBonusItemMaster_LoginBonus" , fields: loginBonusId , references: id)
}

model LoginBonusMaster {
  id String @id
  masterId Int 
  type LoginBonusType 
  title String 
  order Int 
  loop Boolean 
  startDate DateTime 
  endDate DateTime 
  positionId Int 
  subscriptionId Int 
  backgroundImage String 
  foregroundImage String 
  datePositions Int[] 
  limitDays Int 
  comebackDays Int 
  region Region 
  items LoginBonusItemMaster[] @relation("LoginBonusItemMaster_LoginBonus")
  eventLoginBonusItems EventLoginBonusItemMaster[] @relation("EventLoginBonusItemMaster_LoginBonus")
}

model LoginBonusPositionTemplateMaster {
  id String @id
  masterId Int 
  sequence Int 
  positions Int[] 
  region Region 
}

model MapEventMaster {
  id String @id
  masterId Int 
  mapId String 
  motions Int[] 
  directions Int[] 
  skins Int[] 
  eventType MapEventType 
  summerSkins Int[] 
  region Region 
  map MapMaster @relation("MapEventMaster_Map" , fields: mapId , references: id)
  characters CharacterMaster[] @relation("MapEventMaster_Characters")
}

model SummerClothMaster {
  id String @id
  masterId Int 
  characterIds Int[] 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model CommandMaster {
  id String @id
  masterId Int 
  title String 
  command String 
  region Region 
  achievements AchievementMaster[] @relation("AchievementMaster_CommandMaster")
  missionDetails MissionDetailMaster[] @relation("MissionDetailMaster_CommandMaster")
}

model MissionPanelMaster {
  id String @id
  masterId Int 
  groupId String 
  bannerGroup Int 
  step Int 
  name String 
  region Region 
  details MissionDetailMaster[] @relation("MissionDetailMaster_Panel")
  group MissionGroupMaster @relation("MissionPanelMaster_Group" , fields: groupId , references: id)
}

model ChartDesignerMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
  charts ChartMaster[] @relation("ChartMaster_Designer")
}

model ChartLessonMaster {
  id String @id
  chartId Int 
  measureIndex Int 
  text String 
  imagePaths String[] 
  region Region 
}

model HiddenMusicMixDetailMaster {
  id String @id
  mixId String 
  order Int 
  startTime Float 
  startTimeBpm Float 
  endTime Float 
  endTimeBpm Float 
  enableLongMixStart Boolean 
  enableLongMixEnd Boolean 
  region Region 
  mix HiddenMusicMixMaster @relation("HiddenMusicMixDetailMaster_Mix" , fields: mixId , references: id)
}

model HiddenMusicMixMaster {
  id String @id
  masterId Int 
  triggerMusicIds Int[] 
  region Region 
  details HiddenMusicMixDetailMaster[] @relation("HiddenMusicMixDetailMaster_Mix")
}

model TutorialMusicMaster {
  id String @id
  masterId Int 
  order Int 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model ChartNoteCountMaster {
  id String @id
  chartId Int 
  section ChartSectionType 
  normalCount Int 
  simpleCount Int 
  region Region 
}

model HiddenMusicMixNoteCountMaster {
  id String @id
  masterId Int 
  order Int 
  difficulty ChartDifficulty 
  normalCount Int 
  simpleCount Int 
  region Region 
}

model MusicRecommendMaster {
  id String @id
  masterId Int 
  description String 
  isClientOnly Boolean 
  isChooseAbsolutely Boolean 
  isInsurance Boolean 
  region Region 
}

model NavigationCardNotifyMaster {
  id String @id
  masterId Int 
  cardId Int 
  categories PushNotificationType 
  text String 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model NavigationCardVoiceMaster {
  id String @id
  masterId Int 
  cardId Int 
  categories NavigationCardVoiceCategory 
  value1 Int 
  value2 Int 
  startDate DateTime 
  endDate DateTime 
  region Region 
}

model OptionPresetMaster {
  id String @id
  masterId Int 
  name String 
  description String 
  data String 
  isSelectable Boolean 
  dataDescription String 
  region Region 
}

model CardAffectionRewardMaster {
  id String @id
  masterId Int 
  attributeId Int 
  characterId Int 
  rarityId Int 
  affection Int 
  isNoEpisodeOnly Boolean 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model RewardMaster {
  id String @id
  masterId Int 
  category RewardCategory 
  rewardId Int 
  amount Int 
  region Region 
}

model TowerMaster {
  id String @id
  masterId Int 
  name String 
  category String 
  availableCharacterIds Int[] 
  availableAttributeIds Int[] 
  bonusCharacterIds Int[] 
  characterMatchParameterBonusId String 
  bonusAttributeIds Int[] 
  attributeMatchParameterBonusId String 
  bonusCardIds Int[] 
  startDate DateTime 
  endDate DateTime 
  region Region 
  characterMatchParameterBonus ParameterBonusMaster @relation("TowerMaster_CharacterMatchParameterBonus" , fields: characterMatchParameterBonusId , references: id)
  attributeMatchParameterBonus ParameterBonusMaster @relation("TowerMaster_AttributeMatchParameterBonus" , fields: attributeMatchParameterBonusId , references: id)
  towerStages TowerStageMaster[] @relation("TowerStageMaster_Tower")
}

model StaminaMaster {
  id String @id
  category StaminaCategory 
  name String 
  maxCount Int 
  maxAllowCount Int 
  recoverySeconds Int 
  startDate DateTime 
  endDate DateTime 
  eventType EventType 
  region Region 
}

model TowerStageMaster {
  id String @id
  towerId String 
  order Int 
  name String 
  targetScore Int 
  region Region 
  tower TowerMaster @relation("TowerStageMaster_Tower" , fields: towerId , references: id)
  musics MusicMaster[] @relation("TowerStageMaster_Musics")
}

model QuestClubDeckMaster {
  id String @id
  masterId Int 
  spotId String 
  itemId String 
  effectIndex Int 
  region Region 
  spot ClubItemSpotMaster @relation("QuestClubDeckMaster_Spot" , fields: spotId , references: id)
  item ClubItemMaster @relation("QuestClubDeckMaster_Item" , fields: itemId , references: id)
}

model QuestDeckMaster {
  id String @id
  masterId Int 
  order Int 
  cardId String 
  illustType CardIllustType 
  region Region 
  card CardMaster @relation("QuestDeckMaster_Card" , fields: cardId , references: id)
}

model RatingMusicMaster {
  id String @id
  masterId Int 
  ratingId Int 
  musicId Int 
  region Region 
}

model RatingRankMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
}

model RatingRewardMaster {
  id String @id
  masterId Int 
  ratingId Int 
  rankId Int 
  mileageRank MileageRank 
  requireRating Int 
  rewardId Int 
  region Region 
}

model SceneBGMEffectMaster {
  id String @id
  masterId Int 
  sceneName String 
  volume Float 
  bandpassFilterValue Float[] 
  region Region 
}

model LimitBreakItemMaster {
  id String @id
  masterId Int 
  rarityId String 
  attributeId String 
  limitBreakCount Int 
  stockId String 
  amount Int 
  region Region 
  rarity RarityMaster @relation("LimitBreakItemMaster_Rarity" , fields: rarityId , references: id)
  attribute AttributeMaster @relation("LimitBreakItemMaster_Attribute" , fields: attributeId , references: id)
  stock StockMaster @relation("LimitBreakItemMaster_Stock" , fields: stockId , references: id)
}

model NextConsumeStockMaster {
  id String @id
  stockId Int 
  nextStocksId Int[] 
  region Region 
}

model RandomStockMaster {
  id String @id
  masterId Int 
  originalStockId Int 
  stockId Int 
  amount Int 
  rate Int 
  region Region 
}

model StockViewCategoryMaster {
  id String @id
  masterId Int 
  name String 
  region Region 
  stocks StockMaster[] @relation("StockMaster_ViewCategory")
}

model VoltageRecoverMaster {
  id String @id
  masterId Int 
  category StaminaCategory 
  minRecoveredCount Int 
  diamondAmount Int 
  voltageRecoverAmount Int 
  region Region 
}

model SceneGroupTipsMaster {
  id String @id
  masterId Int 
  sceneName String 
  groupIds Int[] 
  region Region 
}

model TrumpMaster {
  id String @id
  suit TrumpSuit 
  masterId Int 
  imageId Int 
  pose Int 
  region Region 
}

enum CampaignButtonDisplayLocation {
  Home
  Club
  Story
}

enum CampaignCategory {
  Mileage
  RaidUserExp
  RaidUnitExp
}

enum CardIllustType {
  Normal
  LimitBreak
  MaxLimitBreak
}

enum PassiveSkillType {
  None
  FeverBonus
  FeverSupport
  ScoreUpWithDamage
  AutoScoreUp
  SupportableScoreUp
  SupportableSkillLonger
}

enum ClubItemSpotCategory {
  Club
  DJ
  Stage
  Ceiling
}

enum ClubItemTargetType {
  None
  Unit
  Attribute
  Parameter
  Character
  All
}

enum CommonValueType {
  LiveSECount
  LiveNoteDesignCount
  LiveTapEffectCount
  LiveSliderLineCount
  LiveSliderArrowCount
  LiveContinueDiamondAmount
  LiveBoostMultiplier
  GameLogicHours
  LikeEachTakeCount
  DJBoothGuestBookLatestListCount
  FriendRequestMaxCount
  PresentReceivedDayCount
  FavoriteStampMaxCount
  HonorMaxCount
  DJBoothSetlistMaxCount
  DJBoothGuestBookSetlistCount
  DJBoothGuestBookHighScoreListCount
  DJBoothSetlistLivePassMaxCount
  DJBoothSetlistActiveLivePassMaxCount
  CharacterMaxCountPerUnit
  DeckEditGaugeMaxValue
  AvailableLatestNormalUnitId
  HighScoreRatingDivisionCoefficient
  NicknameMaxLength
  CommentMaxLength
  CardDeckNameMaxLength
  ClubDeckNameMaxLength
  DJBoothSetlistTitleMaxLength
  MusicFavoriteDeckNameMaxLength
  DJBoothCommentMaxLength
  LiveSEPresetNameMaxLength
  EpisodeCommentMaxLength
  BirthdayFlowerCommentMaxLength
  EpisodeCommentShareMaxLength
  VoltageMaxAllowCount
  ConvertedRewardHelpId
  PrivateRoomCommentMaxLength
  RaidEventHpMode
  RaidEventSpecialBossHpMode
  ClubOrderCharaShadow
  ClubOrderDJChara
  ClubOrderDJBooth
  ClubOrderOtherChara
  ClubOrderFrontChara
  MusicTagMaxCount
  MusicTagNameMaxLenght
  MusicTagNeedLevel
  MusicRecommendCount
  EventSlotExtendableBonusTimeSeconds
  EventGrowthActionCardMaxMoveCount
  EventGrowthMaxHandCount
  EventGrowthExactDeckCount
  EventGrowthExactGrowthMemberCount
  EventGrowthActionCardMaxLevel
  EventGrowthActionCardMaxSameCharacter
  EventGrowthMaximumRedrawCount
  EventGrowthConsumeVoltageForRedraw
  EventGrowthConsumeVoltageForPlayStart
  EpisodeCommentTakeCount
  EpisodeCommentRewriteHours
  EpisodeCommentPenaltyHours
  EpisodeCommentRatingLimit
  EpisodeCommentPenaltyCount
  EventRaveFlyerBonusRate
  EventRaveFlyerBonusRecoveryMaxCount
}

enum PushNotificationType {
  Midnight
  Liked
  GuestBookPost
  FriendRequest
  MusicPresent
  VoltageMax
  Retention24h
  NavigationCard
}

enum ConditionCategory {
  None
  UserLevel
  UnitLevel
  ClubItem
  Story
  EventPoint
  CharacterRank
  Unreleased
}

enum EpisodeCategory {
  Unit
  Event
  Card
  LiveResult
  Map
  Character
  Growth
  Tutorial
}

enum BingoCardType {
  Normal
  Special
}

enum BingoRewardCategory {
  Bingo
  Hit
  Complete
}

enum GrowthBlockCategory {
  None
  Red
  Green
  Character
  White
  Condition
  Reward
  VS
}

enum GrowthBlockEffectType {
  None
  TrainingBonus
  HeartExp
  TechniqueExp
  PhysicalExp
  AllExp
  LevelChange
  BlockChange
  CharacterEffect
  TreasureEffect
  LiveBattle
  OtherEffectSet
}

enum GrowthEffectTargetType {
  None
  Pick
  All
  Random
}

enum GrowthEffectTypeOperator {
  None
  Rate
  Step
}

enum GrowthEnemyType {
  Normal
  Collabo
}

enum EventAggregationType {
  MainAddPoint
  Highscore
  EngineSpecific
  DailyAddPoint
  CommonAddPoint
  RaveShiftPoint
  None
}

enum EventEpisodeType {
  Normal
  D4Fes1
  D4Fes2
  D4Fes3
  D4Fes3Nova
  D4Fes3Origin
  D4Fes3Finale
}

enum EventType {
  None
  Bingo
  Medley
  Poker
  Raid
  Slot
  Growth
  Rave
}

enum PokerHandCategory {
  RoyalStraightFlush
  StraightFlush
  FourOfAKind
  FullHouse
  Flush
  Straight
  ThreeOfAKind
  TwoPair
  OnePair
  HighCard
}

enum BossLoopType {
  Loop
  FinalLoop
}

enum RAVEClubTierType {
  Rookie
  Newcomer
  Guest
  Resident
  Challenger
  Dominator
}

enum RaveMemberTrendGroupCategory {
  Unit
  Character
  Attribute
  Parameter
  Rarity
  Skill
  PassiveSkill
  StackCount
}

enum SlotEffectPhase {
  None
  SD
  Reach
  Stamp
  UnitLogo
  FlavorText
  Shutdown
  Card
}

enum DateSelectCategory {
  None
  Daily
  Weekly
  Monthly
}

enum GachaCategory {
  Normal
  Tutorial
  Event
  Birthday
  StartDash
  Revival
  Special
}

enum GachaRouletteType {
  PickUpUp
  RarityUp
  StockPresent
}

enum GachaType {
  Normal
  StepUp
  Audition
  Guaranteed
}

enum HonorType {
  Common
  Mission
  DigRank
  Event
  D4Pass
  Character
}

enum Live2DUIChatCategory {
  MenuCommon
  LoginBonus
  Mission
  BoxGacha
  BoxGachaDraw
  BoxGachaJackpot
  Training
  BoxGachaReset
}

enum ChartAchieveType {
  Score
  Combo
  ClearCount
}

enum LiveType {
  Single
  Medley
  SingleBattle
}

enum MultiRoomType {
  Free
  Beginner
  Veteran
  Master
}

enum LiveSECategory {
  None
  Tap1
  Tap2
  SliderFlick
  Scratch
  TapEmpty
  ScratchEmpty
  LongLoop
}

enum LiveSEPackCategory {
  SoundEffect
  CharacterVoice
  Collabo
}

enum LoginBonusType {
  Common
  Campaign
  Subscription
  VipBronze
  VipSilver
  VipGold
  VipPlatinum
  EventBingo
  EventMedley
  EventPoker
  EventRaid
  EventSlot
  EventGrowth
  EventRave
}

enum MapBirthdayFlowerType {
  Public
  Private
}

enum MapEventType {
  Normal
  Special
  Birthday
}

enum MapObjectType {
  Prefab
  Image
  Movie
}

enum MobMovingPattern {
  Fixed
  OneWay
  Loop
}

enum AchievementNotifyType {
  Default
  PokerHand
  BingoCard
  Slot
}

enum MissionCategory {
  Achievement
  Tutorial
  Chart
  TimeLimited
  Daily
  Weekly
  Event
}

enum ChartDifficulty {
  None
  Easy
  Normal
  Hard
  Expert
}

enum ChartSectionType {
  Full
  Begin
  Middle
  End
  DJSimulator
}

enum MusicCategory {
  None
  Original
  Cover
  Game
  Instrumental
  Collabo
}

enum NavigationCardVoiceCategory {
  Talk
  Time
  Weekday
  Idle
}

enum MileageRank {
  Normal
  Bronze
  Silver
  Gold
  Platinum
}

enum QuestConditionType {
  Hp
  MaxCombo
  GreatCount
  GoodCount
  BadCount
  MissCount
  Score
}

enum StaminaCategory {
  Voltage
  RavePoint
}

enum StampCategory {
  Common
  Rare
  Collabo
}

enum RewardCategory {
  Stock
  Card
  ClubItem
  Music
  Stamp
  Honor
  Episode
  Movie
  DuplicateCard
  EventPoint
  LiveSEPack
  Cloth
  CardParameterOverwriter
  BirthdayFlower
  DigRankLevel
}

enum StockCategory {
  Diamond
  Fragment
  Exp
  SkillExp
  LimitBreak
  VoltageRecovery
  Boost
  MusicShop
  Event
  GachaTicket
  Random
  ParameterLevelUp
  CardStack
  RavePointRecovery
  RaveBoost
  Other
}

enum TrumpSuit {
  Club
  Diamond
  Heart
  Spade
}

