generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "postgres"
        url      = env("DATABASE_URL")
}

enum Region {
        en
        jp
}

// enum StaminaCategory {
//         Voltage
//         RavePoint
// }

enum EventType {
        None
        Bingo
        Medley
        Poker
        Raid
        Slot
        Growth
        Rave
}

// model StaminaMaster {
//         id              String          @id
//         category        StaminaCategory
//         name            String
//         maxCount        Int
//         maxAllowCount   Int
//         recoverySeconds Int
//         startDate       DateTime
//         endDate         DateTime
//         eventType       EventType
//         region          Region
// }

model CharacterMaster {
        id               String       @id
        masterId         Int
        fullName         String
        firstName        String
        firstNameEnglish String
        unitId           String
        profileAnswers   String[]
        fullNameEnglish  String
        colorCode        String
        idHistories      Int[]
        region           Region
        cards            CardMaster[] @relation("CardMaster_Character")
        unit             UnitMaster   @relation("CharacterMaster_Unit", fields: unitId, references: id)
        //   live2DUIChats Live2DUIChatMaster[] @relation("Live2DUIChatMaster_Character")
        //   liveResultEpisodes LiveResultEpisodeMaster[] @relation("LiveResultEpisodeMaster_Characters")
        //   mapEvents MapEventMaster[] @relation("MapEventMaster_Characters")
}

model SkillMaster {
        id                     String       @id
        masterId               Int
        minRecoveryValue       Int
        maxRecoveryValue       Int
        comboSupportCount      Int
        scoreUpRate            Int
        minSeconds             Float
        maxSeconds             Float
        perfectScoreUpRate     Int
        groupBonusCharacterIds Int[]
        groupBonusRates        Int[]
        region                 Region
        cards                  CardMaster[] @relation("CardMaster_SkillParameter")
}

// enum PassiveSkillType {
//   None
//   FeverBonus
//   FeverSupport
//   ScoreUpWithDamage
//   AutoScoreUp
//   SupportableScoreUp
//   SupportableSkillLonger
// }

// model PassiveSkillDescriptionMaster {
//   id String @id
//   type PassiveSkillType 
//   description String 
//   region Region 
// }

model CardMaster {
        id                        String          @id
        masterId                  Int
        rarity                    Int
        cardName                  String
        attribute                 Int
        characterId               String
        skillParameterId          String
        skillName                 String
        // passiveSkillId             String
        maxParameters             Int[]
        gachaMessage              String
        clothCardId               Int
        debutOrder                Int
        cardIllustHeadDistanceY   Float[]
        cardIllustCenterDistanceX Float[]
        startDate                 DateTime
        endDate                   DateTime
        gachaCardAttribute        Int
        region                    Region
        //   cardDisplays CardDisplayMaster[] @relation("CardDisplayMaster_Card")
        //   rarity RarityMaster @relation("CardMaster_Rarity" , fields: rarityId , references: id)
        //   attribute AttributeMaster @relation("CardMaster_Attribute" , fields: attributeId , references: id)
        character                 CharacterMaster @relation("CardMaster_Character", fields: characterId, references: id)
        skillParameter            SkillMaster     @relation("CardMaster_SkillParameter", fields: skillParameterId, references: id)
        //   passiveSkill PassiveSkillMaster @relation("CardMaster_PassiveSkill" , fields: passiveSkillId , references: id)
        // gachaPickUpCards          GachaMaster[]   @relation("GachaMaster_PickUpCards")
        //   gachaSelectBonusCards GachaMaster[] @relation("GachaMaster_SelectBonusCards")
        //   gachaHomeAnimationCards GachaMaster[] @relation("GachaMaster_HomeAnimationCards")
        //   boxGachas BoxGachaMaster[] @relation("BoxGachaMaster_Card")
        //   questDecks QuestDeckMaster[] @relation("QuestDeckMaster_Card")
}

model UnitMaster {
        id                   String            @id
        masterId             Int
        name                 String
        canTraining          Boolean
        summaries            String[]
        mainColorCode        String
        subColorCode         String
        shortName            String
        initDeckCharacterIds Int[]
        region               Region
        characters           CharacterMaster[] @relation("CharacterMaster_Unit")
        //   episodes UnitEpisodeMaster[] @relation("UnitEpisodeMaster_Unit")
        musics               MusicMaster[]     @relation("MusicMaster_Unit")
}

model UnitExpMaster {
        id       String @id
        level    Int
        totalExp Int
        region   Region
}

enum ChartSectionType {
        Full
        Begin
        Middle
        End
        DJSimulator
}

enum MusicCategory {
        None
        Original
        Cover
        Game
        Instrumental
        Collabo
}

model MusicMaster {
        id               String           @id
        masterId         Int
        name             String
        readName         String
        lyrist           String
        composer         String
        arranger         String
        specialUnitName  String
        category         MusicCategory
        unitId           String
        defaultOrder     Int
        musicBpm         Float
        openKey          Int
        sectionTrend     ChartSectionType
        startDate        DateTime
        endDate          DateTime
        hasMovie         Boolean
        isHidden         Boolean
        excludeChallenge Boolean
        canFairUse       Boolean
        unlockDate       DateTime
        region           Region
        charts           ChartMaster[]    @relation("ChartMaster_Music")
        unit             UnitMaster       @relation("MusicMaster_Unit", fields: unitId, references: id)
        musicMixes       MusicMixMaster[] @relation("MusicMixMaster_Music")
        //   djSimulatorSetlistMusics DJSimulatorSetlistMusicMaster[] @relation("DJSimulatorSetlistMusicMaster_Music")
        //   towerStages TowerStageMaster[] @relation("TowerStageMaster_Musics")
}

model MusicMixMaster {
        id                 String           @id
        musicId            String
        section            ChartSectionType
        startTime          Float
        startTimeBpm       Float
        endTime            Float
        endTimeBpm         Float
        enableLongMixStart Boolean
        enableLongMixEnd   Boolean
        region             Region
        music              MusicMaster      @relation("MusicMixMaster_Music", fields: musicId, references: id)
}

enum ChartDifficulty {
        None
        Easy
        Normal
        Hard
        Expert
}

model ChartMaster {
        id            String              @id
        masterId      Int
        musicId       String
        difficulty    ChartDifficulty
        level         Float
        achieveId     Int
        trends        Float[]
        overrideLevel String
        designerId    String
        region        Region
        music         MusicMaster         @relation("ChartMaster_Music", fields: musicId, references: id)
        designer      ChartDesignerMaster @relation("ChartMaster_Designer", fields: designerId, references: id)
}

model ChartDesignerMaster {
        id       String        @id
        masterId Int
        name     String
        region   Region
        charts   ChartMaster[] @relation("ChartMaster_Designer")
}

enum EventEpisodeType {
        Unknown
        Normal
        D4Fes1
        D4Fes2
        D4Fes3
        D4Fes3Nova
        D4Fes3Origin
        D4Fes3Finale
}

enum EventAggregationType {
        MainAddPoint
        Highscore
        EngineSpecific
        DailyAddPoint
        CommonAddPoint
        RaveShiftPoint
        None
}

model EventAggregationBaseMaster {
        id                           String               @id
        masterId                     Int
        eventId                      String
        aggregationType              EventAggregationType
        pointTypeName                String
        pointTypeIconName            String
        eventPointRewardTemplateId   Int
        eventRankingRewardTemplateId Int
        region                       Region
        event                        EventMaster          @relation("EventAggregationBaseMaster_Event", fields: eventId, references: id)
        //   eventPointRewards EventPointRewardMaster[] @relation("EventPointRewardMaster_Aggregation")
        //   raidBoss RaidBossMaster[] @relation("RaidBossMaster_Aggregation")
        //   eventRankingRewards EventRankingRewardMaster[] @relation("EventRankingRewardMaster_Aggregation")
        //   eventMedleySetlists EventMedleySetlistMaster[] @relation("EventMedleySetlistMaster_Aggregation")
}

model EventMaster {
        id                     String                       @id
        masterId               Int
        name                   String
        type                   EventType
        startDate              DateTime
        receptionCloseDate     DateTime
        rankFixStartDate       DateTime
        resultAnnouncementDate DateTime
        endDate                DateTime
        stockId                Int
        entryBonusStockAmount  Int
        stockAmountPerUse      Int
        episodeCharacters      Int[]
        storyUnlockDate        DateTime
        showExchangeButton     Boolean
        exchangeShopId         Int
        topPrefabPath          String
        showMissionButton      Boolean
        bgmpath                String
        episodeType            EventEpisodeType
        boxGachaId             Int
        region                 Region
        aggregations           EventAggregationBaseMaster[] @relation("EventAggregationBaseMaster_Event")
        // eventSpecificBonuses   EventSpecificBonusMaster[]   @relation("EventSpecificBonusMaster_Event")
        // episodes               EventEpisodeMaster[]         @relation("EventEpisodeMaster_Event")
        // slotBonusTimes         SlotBonusTimeMaster[]        @relation("SlotBonusTimeMaster_Event")
        // slotSpecificBonus      SlotSpecificBonusMaster[]    @relation("SlotSpecificBonusMaster_Event")
}

enum GachaCategory {
        Unknown
        Normal
        Tutorial
        Event
        Birthday
        StartDash
        Revival
        Special
}

enum GachaType {
        Unknown
        Normal
        StepUp
        Audition
        Guaranteed
}

model GachaSummaryWordMaster {
        id       String        @id
        masterId Int
        text     String
        region   Region
        gacha    GachaMaster[] @relation("GachaMaster_Summary")
}

model GachaExplanationWordMaster {
        id       String        @id
        masterId Int
        text     String
        region   Region
        gacha    GachaMaster[] @relation("GachaMaster_Detail")
}

model GachaNotesWordMaster {
        id       String        @id
        masterId Int
        text     String
        region   Region
        gacha    GachaMaster[] @relation("GachaMaster_Note")
}

model GachaMaster {
        id                               String                     @id
        masterId                         Int
        name                             String
        tableIds                         Int[]
        gachaTypeName                    String
        summaryId                        String
        hasSpecificBg                    Boolean
        startDate                        DateTime
        endDate                          DateTime
        detailId                         String
        noteId                           String
        loginTriggerMinutes              Int
        showHomeAnimation                Boolean
        hasPickUpDuplicateBonus          Boolean
        gachaCardAttribute               Int
        ascendingSortId                  Int
        category                         GachaCategory
        selectBonusMaxValue              Int
        pickUpDuplicateBonusStockIds     Int[]
        pickUpDuplicateBonusStockAmounts Int[]
        type                             GachaType
        stepLoopCount                    Int
        otherCardDate                    DateTime
        pickUpLevelMax                   Boolean
        shareCashBackRate                Int
        randomBonusMaxValue              Int
        randomBonusStockId               Int
        region                           Region
        pickUpCardsPrimaryKey            Int[]
        //   tableRates GachaTableRateMaster[] @relation("GachaMaster_TableRates")
        // pickUpCards                      CardMaster[]               @relation("GachaMaster_PickUpCards")
        summary                          GachaSummaryWordMaster     @relation("GachaMaster_Summary", fields: summaryId, references: id)
        detail                           GachaExplanationWordMaster @relation("GachaMaster_Detail", fields: detailId, references: id)
        note                             GachaNotesWordMaster       @relation("GachaMaster_Note", fields: noteId, references: id)
        // selectBonusCards                 CardMaster[]  @relation("GachaMaster_SelectBonusCards")
        // homeAnimationCards               CardMaster[]  @relation("GachaMaster_HomeAnimationCards")
        //   draws GachaDrawMaster[] @relation("GachaDrawMaster_Gacha")
}

enum StampCategory {
        Common
        Rare
        Collabo
}

model StampMaster {
        id           String        @id
        masterId     Int
        category     StampCategory
        name         String
        description  String
        hasVoice     Boolean
        duplicateId  Int
        characterIds Int[]
        region       Region
}

enum HonorType {
        Unknown
        Common
        Mission
        DigRank
        Event
        D4Pass
        Character
}

model HonorMaster {
        id              String    @id
        masterId        Int
        type            HonorType
        name            String
        description     String
        effectType      Int
        conditionCardId Int
        duplicateId     Int
        region          Region
}

enum StockCategory {
        Unknown
        Diamond
        Fragment
        Exp
        SkillExp
        LimitBreak
        VoltageRecovery
        Boost
        MusicShop
        Event
        GachaTicket
        Random
        ParameterLevelUp
        CardStack
        RavePointRecovery
        RaveBoost
        Other
}

model StockMaster {
        id                 String                  @id
        masterId           Int
        name               String
        category           StockCategory
        viewCategoryId     String
        summary            String
        attributeId        Int
        rarity             Int
        exp                Int
        buffCharacterId    Int
        recoveryAmount     Int
        consumeAmount      Int
        maxAmount          Int
        startDate          DateTime
        endDate            DateTime
        isAppropriateSales Boolean
        region             Region
        //   slotBonusTimes SlotBonusTimeMaster[] @relation("SlotBonusTimeMaster_Stock")
        viewCategory       StockViewCategoryMaster @relation("StockMaster_ViewCategory", fields: viewCategoryId, references: id)
        //   boxGachas BoxGachaMaster[] @relation("BoxGachaMaster_Stock")
        //   cardStackItems CardStackItemMaster[] @relation("CardStackItemMaster_Stock")
        //   slotRewards SlotRewardMaster[] @relation("SlotRewardMaster_Stock")
        //   auditionGachaReset AuditionGachaResetMaster[] @relation("AuditionGachaResetMaster_Stock")
        //   gachaDraws GachaDrawMaster[] @relation("GachaDrawMaster_Stock")
        //   chartAchieveRewards ChartAchieveMaster[] @relation("ChartAchieveMaster_RewardStock")
        //   limitBreakItems LimitBreakItemMaster[] @relation("LimitBreakItemMaster_Stock")
}

model StockViewCategoryMaster {
        id       String        @id
        masterId Int
        name     String
        region   Region
        stocks   StockMaster[] @relation("StockMaster_ViewCategory")
}
