generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "postgres"
        url      = env("DATABASE_URL")
}

enum Region {
        en
        jp
}

// enum StaminaCategory {
//         Voltage
//         RavePoint
// }

enum EventType {
        None
        Bingo
        Medley
        Poker
        Raid
        Slot
        Growth
        Rave
}

// model StaminaMaster {
//         id              String          @id
//         category        StaminaCategory
//         name            String
//         maxCount        Int
//         maxAllowCount   Int
//         recoverySeconds Int
//         startDate       DateTime
//         endDate         DateTime
//         eventType       EventType
//         region          Region
// }

model CardMaster {
        id                         String   @id
        masterId                   Int
        rarityId                   String
        cardName                   String
        attributeId                String
        characterId                String
        skillParameterId           String
        skillName                  String
        passiveSkillId             String
        maxParameters              Int[]
        gachaMessage               String
        clothCardId                Int
        debutOrder                 Int
        cardIllustHeadDistanceY    Float[]
        cardIllustCenterDistanceX  Float[]
        startDate                  DateTime
        endDate                    DateTime
        gachaCardAttribute         Int
        canUseCommonCardStackStock Boolean
        region                     Region
        //   cardDisplays CardDisplayMaster[] @relation("CardDisplayMaster_Card")
        //   rarity RarityMaster @relation("CardMaster_Rarity" , fields: rarityId , references: id)
        //   attribute AttributeMaster @relation("CardMaster_Attribute" , fields: attributeId , references: id)
        //   character CharacterMaster @relation("CardMaster_Character" , fields: characterId , references: id)
        //   skillParameter SkillMaster @relation("CardMaster_SkillParameter" , fields: skillParameterId , references: id)
        //   passiveSkill PassiveSkillMaster @relation("CardMaster_PassiveSkill" , fields: passiveSkillId , references: id)
        //   gachaPickUpCards GachaMaster[] @relation("GachaMaster_PickUpCards")
        //   gachaSelectBonusCards GachaMaster[] @relation("GachaMaster_SelectBonusCards")
        //   gachaHomeAnimationCards GachaMaster[] @relation("GachaMaster_HomeAnimationCards")
        //   boxGachas BoxGachaMaster[] @relation("BoxGachaMaster_Card")
        //   questDecks QuestDeckMaster[] @relation("QuestDeckMaster_Card")
}

model UnitMaster {
        id                   String        @id
        masterId             Int
        name                 String
        canTraining          Boolean
        summaries            String[]
        mainColorCode        String
        subColorCode         String
        shortName            String
        initDeckCharacterIds Int[]
        region               Region
        //   characters CharacterMaster[] @relation("CharacterMaster_Unit")
        //   episodes UnitEpisodeMaster[] @relation("UnitEpisodeMaster_Unit")
        musics               MusicMaster[] @relation("MusicMaster_Unit")
}

model UnitExpMaster {
        id       String @id
        level    Int
        totalExp Int
        region   Region
}

enum ChartSectionType {
        Full
        Begin
        Middle
        End
        DJSimulator
}

enum MusicCategory {
        None
        Original
        Cover
        Game
        Instrumental
        Collabo
}

model MusicMaster {
        id               String           @id
        masterId         Int
        name             String
        readName         String
        lyrist           String
        composer         String
        arranger         String
        specialUnitName  String
        category         MusicCategory
        unitId           String
        defaultOrder     Int
        musicBpm         Float
        openKey          Int
        sectionTrend     ChartSectionType
        startDate        DateTime
        endDate          DateTime
        hasMovie         Boolean
        isHidden         Boolean
        excludeChallenge Boolean
        canFairUse       Boolean
        unlockDate       DateTime
        region           Region
        charts           ChartMaster[]    @relation("ChartMaster_Music")
        unit             UnitMaster       @relation("MusicMaster_Unit", fields: unitId, references: id)
        musicMixes       MusicMixMaster[] @relation("MusicMixMaster_Music")
        //   djSimulatorSetlistMusics DJSimulatorSetlistMusicMaster[] @relation("DJSimulatorSetlistMusicMaster_Music")
        //   towerStages TowerStageMaster[] @relation("TowerStageMaster_Musics")
}

model MusicMixMaster {
        id                 String           @id
        musicId            String
        section            ChartSectionType
        startTime          Float
        startTimeBpm       Float
        endTime            Float
        endTimeBpm         Float
        enableLongMixStart Boolean
        enableLongMixEnd   Boolean
        region             Region
        music              MusicMaster      @relation("MusicMixMaster_Music", fields: musicId, references: id)
}

enum ChartDifficulty {
        None
        Easy
        Normal
        Hard
        Expert
}

model ChartMaster {
        id            String              @id
        masterId      Int
        musicId       String
        difficulty    ChartDifficulty
        level         Float
        achieveId     Int
        trends        Float[]
        overrideLevel String
        designerId    String
        region        Region
        music         MusicMaster         @relation("ChartMaster_Music", fields: musicId, references: id)
        designer      ChartDesignerMaster @relation("ChartMaster_Designer", fields: designerId, references: id)
}

model ChartDesignerMaster {
        id       String        @id
        masterId Int
        name     String
        region   Region
        charts   ChartMaster[] @relation("ChartMaster_Designer")
}

enum EventEpisodeType {
        Normal
        D4Fes1
        D4Fes2
        D4Fes3
        D4Fes3Nova
        D4Fes3Origin
        D4Fes3Finale
}

enum EventAggregationType {
        MainAddPoint
        Highscore
        EngineSpecific
        DailyAddPoint
        CommonAddPoint
        RaveShiftPoint
        None
}

model EventAggregationBaseMaster {
        id                           String               @id
        masterId                     Int
        eventId                      String
        aggregationType              EventAggregationType
        pointTypeName                String
        pointTypeIconName            String
        eventPointRewardTemplateId   Int
        eventRankingRewardTemplateId Int
        region                       Region
        event                        EventMaster          @relation("EventAggregationBaseMaster_Event", fields: eventId, references: id)
        //   eventPointRewards EventPointRewardMaster[] @relation("EventPointRewardMaster_Aggregation")
        //   raidBoss RaidBossMaster[] @relation("RaidBossMaster_Aggregation")
        //   eventRankingRewards EventRankingRewardMaster[] @relation("EventRankingRewardMaster_Aggregation")
        //   eventMedleySetlists EventMedleySetlistMaster[] @relation("EventMedleySetlistMaster_Aggregation")
}

model EventMaster {
        id                     String                       @id
        masterId               Int
        name                   String
        type                   EventType
        startDate              DateTime
        receptionCloseDate     DateTime
        rankFixStartDate       DateTime
        resultAnnouncementDate DateTime
        endDate                DateTime
        stockId                Int
        entryBonusStockAmount  Int
        stockAmountPerUse      Int
        episodeCharacters      Int[]
        storyUnlockDate        DateTime
        showExchangeButton     Boolean
        exchangeShopId         Int
        topPrefabPath          String
        showMissionButton      Boolean
        bgmpath                String
        episodeType            EventEpisodeType
        boxGachaId             Int
        region                 Region
        aggregations           EventAggregationBaseMaster[] @relation("EventAggregationBaseMaster_Event")
        // eventSpecificBonuses   EventSpecificBonusMaster[]   @relation("EventSpecificBonusMaster_Event")
        // episodes               EventEpisodeMaster[]         @relation("EventEpisodeMaster_Event")
        // slotBonusTimes         SlotBonusTimeMaster[]        @relation("SlotBonusTimeMaster_Event")
        // slotSpecificBonus      SlotSpecificBonusMaster[]    @relation("SlotSpecificBonusMaster_Event")
}
